{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":56537,"databundleVersionId":8015876,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport polars as pl # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-30T20:27:05.380413Z","iopub.execute_input":"2024-04-30T20:27:05.382021Z","iopub.status.idle":"2024-04-30T20:27:19.318253Z","shell.execute_reply.started":"2024-04-30T20:27:05.381970Z","shell.execute_reply":"2024-04-30T20:27:19.316854Z"},"trusted":true},"execution_count":479,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/pty.py:89: RuntimeWarning: os.fork() was called. os.fork() is incompatible with multithreaded code, and JAX is multithreaded, so this will likely lead to a deadlock.\n  pid, fd = os.forkpty()\n","output_type":"stream"},{"name":"stdout","text":"Requirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (4.66.1)\n/kaggle/input/leap-atmospheric-physics-ai-climsim/sample_submission.csv\n/kaggle/input/leap-atmospheric-physics-ai-climsim/train.csv\n/kaggle/input/leap-atmospheric-physics-ai-climsim/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# File Paths and Chunk Size\n\n- set file path for train set and test set\n- read training dataset with chunks as its large file","metadata":{}},{"cell_type":"code","source":"# 文件路径\ntrain_csv = '/kaggle/input/leap-atmospheric-physics-ai-climsim/train.csv'\ntest_csv = '/kaggle/input/leap-atmospheric-physics-ai-climsim/test.csv'\n\nread_chunk_size = 50000 # 一次性读取50000行数据","metadata":{"execution":{"iopub.status.busy":"2024-04-30T14:57:11.923031Z","iopub.execute_input":"2024-04-30T14:57:11.924193Z","iopub.status.idle":"2024-04-30T14:57:11.931941Z","shell.execute_reply.started":"2024-04-30T14:57:11.924159Z","shell.execute_reply":"2024-04-30T14:57:11.931018Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"- read data from csv file and get the 1st chunk","metadata":{}},{"cell_type":"code","source":"# 读取数据\n%time\ntrain_chunks = pd.read_csv(train_csv, chunksize = read_chunk_size)\ntrain_data = next(train_chunks)\ntrain_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:08:16.012836Z","iopub.execute_input":"2024-04-30T15:08:16.013226Z","iopub.status.idle":"2024-04-30T15:08:27.811720Z","shell.execute_reply.started":"2024-04-30T15:08:16.013192Z","shell.execute_reply":"2024-04-30T15:08:27.810611Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 8.82 µs\n","output_type":"stream"},{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"(50000, 925)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Split training set\n\n1. split into input and output\n2. split into \n    - training set\n    - validation set\n    - testing set","metadata":{"execution":{"iopub.status.busy":"2024-04-30T12:42:05.275659Z","iopub.execute_input":"2024-04-30T12:42:05.276073Z","iopub.status.idle":"2024-04-30T12:42:05.286260Z","shell.execute_reply.started":"2024-04-30T12:42:05.276042Z","shell.execute_reply":"2024-04-30T12:42:05.284486Z"}}},{"cell_type":"code","source":"# 划分数据集\ncols = train_data.columns\n\ndef split_io(dframe, in_cols = cols[1:557], out_cols = cols[557:]):\n    # 划分输入输出\n    in_df = dframe[in_cols]\n    out_df = dframe[out_cols]\n    return in_df, out_df\n\ndef split_tvt(dframe, ratio=[0.8], shuffle=False):\n    # 设定好 train (和 val) 集的比例，剩余的均归到test/val\n    assert sum(ratio) <= 1, \"Ratio sum for train and val cannot be bigger than 1\"\n    assert len(ratio) > 0, \"Ratio cannot be empty\"\n     # 根据是否需要测试集来调整比例\n    train_rat = ratio[0]\n    val_rat = (1 - train_rat) if len(ratio) == 1 else ratio[1]\n    test_rat = (1 - train_rat - val_rat) if len(ratio) == 2 else 0\n    \n    data_size = dframe.shape[0]\n    train_size = int(data_size * train_rat)\n    val_size = (data_size - train_size) if len(ratio) == 1 else int(data_size * val_rat)\n    \n    if shuffle:\n        dframe = dframe.sample(frac=1).reset_index(drop=True)\n        \n    train = dframe.iloc[:train_size]\n    val = dframe.iloc[train_size:train_size + val_size]\n    \n    if test_rat != 0:\n        test = dframe.iloc[train_size + val_size:]\n        return train, val, test\n    else:\n        return train, val\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:08:47.700877Z","iopub.execute_input":"2024-04-30T15:08:47.701252Z","iopub.status.idle":"2024-04-30T15:08:47.711148Z","shell.execute_reply.started":"2024-04-30T15:08:47.701223Z","shell.execute_reply":"2024-04-30T15:08:47.709937Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# 划分数据集\ntrain_set, val_set, test_set = split_tvt(train_data, [0.7, 0.2], True)\ntrain_in, train_out = split_io(train_set)\nval_in, val_out = split_io(val_set)\ntest_in, test_out = split_io(test_set)\n\nprint(f'{val_set.shape = }')\nprint(f'{test_set.shape = }')\nprint(f'{train_in.shape = }')\nprint(f'{train_out.shape = }')\ntrain_set.head(3)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:16:46.705313Z","iopub.execute_input":"2024-04-30T15:16:46.705766Z","iopub.status.idle":"2024-04-30T15:16:47.340774Z","shell.execute_reply.started":"2024-04-30T15:16:46.705730Z","shell.execute_reply":"2024-04-30T15:16:47.339596Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"val_set.shape = (10000, 925)\ntest_set.shape = (5000, 925)\ntrain_in.shape = (35000, 556)\ntrain_out.shape = (35000, 368)\n","output_type":"stream"},{"execution_count":32,"output_type":"execute_result","data":{"text/plain":"     sample_id   state_t_0   state_t_1   state_t_2   state_t_3   state_t_4  \\\n0  train_37853  219.101246  234.330722  237.662140  251.281919  255.641922   \n1   train_2713  219.025999  241.496850  238.420542  246.094370  256.492973   \n2    train_442  216.358178  215.936384  231.294060  247.581520  260.037163   \n\n    state_t_5   state_t_6   state_t_7   state_t_8  ...    ptend_v_58  \\\n0  259.395708  254.911817  248.427156  237.377008  ... -7.875139e-06   \n1  262.379391  258.656271  249.033592  238.252002  ...  7.512782e-07   \n2  267.194287  266.068661  253.047999  235.777240  ...  8.166127e-06   \n\n   ptend_v_59  cam_out_NETSW  cam_out_FLWDS  cam_out_PRECSC  cam_out_PRECC  \\\n0   -0.000020     527.432034     428.768643    0.000000e+00   2.895050e-08   \n1    0.000047      44.636666     405.664546    0.000000e+00   0.000000e+00   \n2   -0.000025       0.000000     303.619895    6.048702e-10   1.909102e-09   \n\n   cam_out_SOLS  cam_out_SOLL  cam_out_SOLSD  cam_out_SOLLD  \n0    252.450844    174.942344     107.551063      61.214117  \n1     10.452816     24.595723      16.640653       4.657856  \n2      0.000000      0.000000       0.000000       0.000000  \n\n[3 rows x 925 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>sample_id</th>\n      <th>state_t_0</th>\n      <th>state_t_1</th>\n      <th>state_t_2</th>\n      <th>state_t_3</th>\n      <th>state_t_4</th>\n      <th>state_t_5</th>\n      <th>state_t_6</th>\n      <th>state_t_7</th>\n      <th>state_t_8</th>\n      <th>...</th>\n      <th>ptend_v_58</th>\n      <th>ptend_v_59</th>\n      <th>cam_out_NETSW</th>\n      <th>cam_out_FLWDS</th>\n      <th>cam_out_PRECSC</th>\n      <th>cam_out_PRECC</th>\n      <th>cam_out_SOLS</th>\n      <th>cam_out_SOLL</th>\n      <th>cam_out_SOLSD</th>\n      <th>cam_out_SOLLD</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>train_37853</td>\n      <td>219.101246</td>\n      <td>234.330722</td>\n      <td>237.662140</td>\n      <td>251.281919</td>\n      <td>255.641922</td>\n      <td>259.395708</td>\n      <td>254.911817</td>\n      <td>248.427156</td>\n      <td>237.377008</td>\n      <td>...</td>\n      <td>-7.875139e-06</td>\n      <td>-0.000020</td>\n      <td>527.432034</td>\n      <td>428.768643</td>\n      <td>0.000000e+00</td>\n      <td>2.895050e-08</td>\n      <td>252.450844</td>\n      <td>174.942344</td>\n      <td>107.551063</td>\n      <td>61.214117</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>train_2713</td>\n      <td>219.025999</td>\n      <td>241.496850</td>\n      <td>238.420542</td>\n      <td>246.094370</td>\n      <td>256.492973</td>\n      <td>262.379391</td>\n      <td>258.656271</td>\n      <td>249.033592</td>\n      <td>238.252002</td>\n      <td>...</td>\n      <td>7.512782e-07</td>\n      <td>0.000047</td>\n      <td>44.636666</td>\n      <td>405.664546</td>\n      <td>0.000000e+00</td>\n      <td>0.000000e+00</td>\n      <td>10.452816</td>\n      <td>24.595723</td>\n      <td>16.640653</td>\n      <td>4.657856</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>train_442</td>\n      <td>216.358178</td>\n      <td>215.936384</td>\n      <td>231.294060</td>\n      <td>247.581520</td>\n      <td>260.037163</td>\n      <td>267.194287</td>\n      <td>266.068661</td>\n      <td>253.047999</td>\n      <td>235.777240</td>\n      <td>...</td>\n      <td>8.166127e-06</td>\n      <td>-0.000025</td>\n      <td>0.000000</td>\n      <td>303.619895</td>\n      <td>6.048702e-10</td>\n      <td>1.909102e-09</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>3 rows × 925 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# Convert Data\n\nRearrange data with 60 dimensions into 2d tensor($n \\times 60$) and data with 1 dimension into a 1d tensor($m \\times 1$). \n\n![input data look like](attachment:a01c902f-d1c5-4e04-a8d9-2914a7e093cd.png)  \n\n<!-- <font color='red'>Un-comment images to see</font> -->\n\nThis is what input data look like\n\n---\n\nAfter test, the input has (16,1) and (9, 60), the output has (8,1) and (6, 60)","metadata":{},"attachments":{"a01c902f-d1c5-4e04-a8d9-2914a7e093cd.png":{"image/png":""}}},{"cell_type":"code","source":"import re\n\n# 转换数据集\ndef convert_data(cols, line):\n    # 输入一个表头和一行的数据，将其转换为两个张量\n    tensor1d = [[],[]]\n    tensor2d = [[],[]]\n    old_title = ''\n    for col, value in zip(cols, line):\n        match = re.search(r'_(\\d+)$', col)\n        if match is None: # in 1d tensor\n            tensor1d[0].append(col)\n            tensor1d[1].append([value])\n        else:\n            title = col[:-len(match.group(0))]\n            if not title == old_title:\n                old_title = title\n                tensor2d[0].append(title)\n                tensor2d[1].append([])\n            tensor2d[1][-1].append(value)\n    tensor1d[0] = np.array(tensor1d[0])\n    tensor2d[0] = np.array(tensor2d[0])\n    tensor1d[1] = np.array(tensor1d[1])\n    tensor2d[1] = np.array(tensor2d[1])\n    return tensor1d, tensor2d\n        \nd1, d2 = convert_data(train_out.columns, train_out.loc[0]) # 测试一行\nprint(f'{d1[0].shape = }\\t{d1[0].dtype = }')\nprint(f'{d1[1].shape = }\\t{d1[1].dtype = }')\nprint(f'{d2[0].shape = }\\t{d2[0].dtype = }')\nprint(f'{d2[1].shape = }\\t{d2[1].dtype = }')","metadata":{"execution":{"iopub.status.busy":"2024-04-30T19:07:42.756332Z","iopub.execute_input":"2024-04-30T19:07:42.756723Z","iopub.status.idle":"2024-04-30T19:07:42.767987Z","shell.execute_reply.started":"2024-04-30T19:07:42.756693Z","shell.execute_reply":"2024-04-30T19:07:42.766913Z"},"trusted":true},"execution_count":322,"outputs":[{"name":"stdout","text":"d1[0].shape = (8,)\td1[0].dtype = dtype('<U14')\nd1[1].shape = (8, 1)\td1[1].dtype = dtype('float64')\nd2[0].shape = (6,)\td2[0].dtype = dtype('<U11')\nd2[1].shape = (6, 60)\td2[1].dtype = dtype('float64')\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Dataset\n\nDefine a custom dataset for this input/output","metadata":{}},{"cell_type":"code","source":"import torch\nfrom torch.utils.data import Dataset\nfrom torch.utils.data import DataLoader\nimport torchvision.transforms as transforms\n\nclass MyDataset(Dataset):\n    def __init__(self, dsin, dsout, transform=transforms.Compose([\n        transforms.ToTensor(),\n    ])):\n        self.dsin = dsin\n        self.dsout = dsout\n        self.transform =transform\n    \n    def __len__(self):\n        return self.dsin.shape[0]\n    \n    def __getitem__(self, x):\n        in1, in2 = convert_data(self.dsin.columns, self.dsin.loc[x])\n        out1, out2 = convert_data(self.dsout.columns, self.dsout.loc[x])\n        din = [in1[1], in2[1]]\n        dout = [out1[1], out2[1]]\n        \n        if self.transform:\n            din[0] = self.transform(din[0])\n            din[1] = self.transform(din[1])\n            dout[0] = self.transform(dout[0])\n            dout[1] = self.transform(dout[1])\n        \n        # 使用torch.unsqueeze将数组从[m, n]转换为[1, m, n]\n        din = [torch.tensor(tensor) for tensor in din]\n        dout = [torch.tensor(tensor) for tensor in dout]\n        din = [tensor.to(torch.float32) for tensor in din]\n        dout = [tensor.to(torch.float32)  for tensor in dout]\n        \n        return din, dout","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:31:17.064960Z","iopub.execute_input":"2024-04-30T20:31:17.065733Z","iopub.status.idle":"2024-04-30T20:31:17.078616Z","shell.execute_reply.started":"2024-04-30T20:31:17.065668Z","shell.execute_reply":"2024-04-30T20:31:17.077234Z"},"trusted":true},"execution_count":494,"outputs":[]},{"cell_type":"code","source":"batch_size = 128\nlr = 0.001\ndevice = 'cuda' if torch.cuda.is_available() else 'cpu'","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:40:28.629560Z","iopub.execute_input":"2024-04-30T20:40:28.629979Z","iopub.status.idle":"2024-04-30T20:40:28.635977Z","shell.execute_reply.started":"2024-04-30T20:40:28.629946Z","shell.execute_reply":"2024-04-30T20:40:28.634500Z"},"trusted":true},"execution_count":514,"outputs":[]},{"cell_type":"code","source":"train_dataset = MyDataset(train_in, train_out)\nprint(f'{len(dataset) = }')\ntrain_loader = DataLoader(train_dataset, batch_size = batch_size, shuffle=True)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:40:43.737842Z","iopub.execute_input":"2024-04-30T20:40:43.738749Z","iopub.status.idle":"2024-04-30T20:40:43.744636Z","shell.execute_reply.started":"2024-04-30T20:40:43.738713Z","shell.execute_reply":"2024-04-30T20:40:43.743433Z"},"trusted":true},"execution_count":516,"outputs":[{"name":"stdout","text":"len(dataset) = 35000\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Build model","metadata":{}},{"cell_type":"code","source":"import torch.nn as nn\nimport torch.nn.functional as F\n\ndef bilinear_kernel(in_channels, out_channels, kernel_size):\n    if type(kernel_size) != tuple:\n        factor = (kernel_size + 1) // 2\n        if kernel_size % 2 == 1:\n            center = factor - 1\n        else:\n            center = factor - 0.5\n        og = (torch.arange(kernel_size[0]).reshape(-1, 1),\n              torch.arange(kernel_size[1]).reshape(1, -1))\n        filt = (1 - torch.abs(og[0] - center) / factor) * \\\n               (1 - torch.abs(og[1] - center) / factor)\n        weight = torch.zeros((in_channels, out_channels,\n                              kernel_size, kernel_size))\n        weight[range(in_channels), range(out_channels), :, :] = filt\n    else:\n        factor1 = (kernel_size[0] + 1) // 2\n        factor2 = (kernel_size[1] + 1) // 2\n        if kernel_size[0] % 2 == 1:\n            center1 = factor1 - 1\n        else:\n            center1 = factor1 - 0.5\n        if kernel_size[1] % 2 == 1:\n            center2 = factor2 - 1\n        else:\n            center2 = factor2 - 0.5\n        og = (torch.arange(kernel_size[0]).reshape(-1, 1),\n              torch.arange(kernel_size[1]).reshape(1, -1))\n        filt = (1 - torch.abs(og[0] - center1) / factor1) * \\\n               (1 - torch.abs(og[1] - center2) / factor2)\n        weight = torch.zeros((in_channels, out_channels,\n                              kernel_size[0], kernel_size[1]))\n        weight[range(in_channels), range(out_channels), :, :] = filt\n    return weight\n\nclass TransConv(nn.Module):\n    def __init__(self, in_channels: int, out_channels: int, \n                 kernel_size, stride=1, padding=0):\n        super(TransConv, self).__init__()\n        self.trans_conv = nn.ConvTranspose2d(in_channels, out_channels, \n                 kernel_size, stride, padding)\n        self.trans_conv.weight.data.copy_(bilinear_kernel(in_channels, out_channels, kernel_size))\n        \n    def forward(self, x):\n        return self.trans_conv(x)\n\nclass Net(nn.Module):\n    def __init__(self):\n        super(Net, self).__init__()\n        self.seq11 = nn.Sequential( # 1, 16, 1\n            nn.Conv2d(1, 16, 3, padding=(1, 2)), # 16, 16, 3\n            nn.Conv2d(16, 32, 5, padding=(2, 3)), # 32, 16, 5\n            nn.MaxPool2d((2,1)), # 32, 8, 5\n            nn.ReLU(),\n            nn.Conv2d(32, 64, 5, padding=(2, 4)),\n            nn.MaxPool2d(2), \n            nn.ReLU(),\n        ) # 64, 4, 4\n        \n        self.seq21 = nn.Sequential( # 1, 9, 60\n            nn.Conv2d(1, 8, 5, padding=3),\n            nn.Conv2d(8, 16, 5, padding=3),\n            nn.MaxPool2d(2),\n            nn.ReLU(),\n            nn.Conv2d(16, 32, 5, padding=3),\n            nn.MaxPool2d(2),\n            nn.ReLU(),\n            nn.Conv2d(32, 64, 3, padding=1),\n            nn.MaxPool2d(2),\n            nn.ReLU(),\n        ) # 64, 2, 8\n        self.seq22 = nn.Sequential(\n            nn.Conv2d(64, 128, 3, padding=(2,3)),\n            nn.MaxPool2d(2),\n            nn.ReLU(),\n            nn.Conv2d(128, 256, 3, padding=(2,2)),\n            nn.MaxPool2d((1,2)),\n            nn.ReLU()\n        ) # 256, 4, 4\n        \n        self.concat = nn.Sequential(\n            nn.Conv2d(320, 320, 5, padding=4),\n            nn.MaxPool2d(2),\n            nn.ReLU(),\n        )\n        \n        self.ups1 = nn.Sequential(\n            nn.Conv2d(320, 1, 1),\n            TransConv(1, 1, (32, 64), padding=(25,8), stride=(8,4)),\n        )\n        \n        self.mlp = nn.Sequential(\n            nn.Flatten(),\n            nn.LazyLinear(144),\n            nn.LazyLinear(84),\n            nn.LazyLinear(8),\n        )\n        \n    \n    def forward(self, x):\n        t1d, t2d = x[0], x[1]\n        t1d = self.seq11(t1d)\n        t2d = self.seq21(t2d)\n        t2d = self.seq22(t2d)\n        tsr = torch.cat([t1d,t2d], 1)\n        tsr = self.concat(tsr)\n        out1 = self.mlp(tsr)\n        out1 = torch.unsqueeze(out1, 1)  # 添加一个额外的维度\n        out1 = torch.unsqueeze(out1, 3)  # 添加另一个额外的维度\n        out2 = self.ups1(tsr)\n        out = (out1, out2)\n        return out\n    \n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:37:06.211223Z","iopub.execute_input":"2024-04-30T20:37:06.211706Z","iopub.status.idle":"2024-04-30T20:37:06.240457Z","shell.execute_reply.started":"2024-04-30T20:37:06.211671Z","shell.execute_reply":"2024-04-30T20:37:06.238553Z"},"trusted":true},"execution_count":506,"outputs":[]},{"cell_type":"code","source":"net = Net()\nnet.to(device)\nind, od = train_dataset[1]\n# out = net(ind)\n# net.seq22(torch.rand((1,64, 2, 8))).shape\n# ind[0].shape","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:40:55.232329Z","iopub.execute_input":"2024-04-30T20:40:55.233327Z","iopub.status.idle":"2024-04-30T20:40:55.278841Z","shell.execute_reply.started":"2024-04-30T20:40:55.233290Z","shell.execute_reply":"2024-04-30T20:40:55.277705Z"},"trusted":true},"execution_count":517,"outputs":[{"name":"stderr","text":"/tmp/ipykernel_33/3189731326.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  din = [torch.tensor(tensor) for tensor in din]\n/tmp/ipykernel_33/3189731326.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  dout = [torch.tensor(tensor) for tensor in dout]\n","output_type":"stream"}]},{"cell_type":"code","source":"import torch.optim as optim\n\ndef criterion(pred, target):\n    loss1 = torch.mean(pred[0] - target[0])\n    loss2 = torch.mean(pred[1] - target[1])\n    loss = loss1 + loss2\n    return loss\n    \noptimizer = optim.Adam(net.parameters(), lr=lr)","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:37:11.348137Z","iopub.execute_input":"2024-04-30T20:37:11.348555Z","iopub.status.idle":"2024-04-30T20:37:11.356346Z","shell.execute_reply.started":"2024-04-30T20:37:11.348508Z","shell.execute_reply":"2024-04-30T20:37:11.355243Z"},"trusted":true},"execution_count":508,"outputs":[]},{"cell_type":"code","source":"# out_hat = net(ind)\n# out_hat[0].shape, out_hat[1].shape","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# loss1 = torch.mean((out_hat[0] - od[0]))\n# loss2 = torch.mean((out_hat[1] - od[1]))\n# loss = loss1 + loss2\n# loss = criterion(out_hat, od)\n# loss.item()","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# loss.backward()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:18:48.910488Z","iopub.execute_input":"2024-04-30T20:18:48.911271Z","iopub.status.idle":"2024-04-30T20:18:48.935605Z","shell.execute_reply.started":"2024-04-30T20:18:48.911234Z","shell.execute_reply":"2024-04-30T20:18:48.934671Z"},"trusted":true},"execution_count":469,"outputs":[]},{"cell_type":"code","source":"# optimizer.step()\n# optimizer.zero_grad()","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:18:50.024287Z","iopub.execute_input":"2024-04-30T20:18:50.025496Z","iopub.status.idle":"2024-04-30T20:18:50.031166Z","shell.execute_reply.started":"2024-04-30T20:18:50.025447Z","shell.execute_reply":"2024-04-30T20:18:50.029894Z"},"trusted":true},"execution_count":470,"outputs":[]},{"cell_type":"code","source":"num_epochs = 50","metadata":{},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from tqdm import tqdm \n\nfor epoch in range(num_epochs):\n    for inp, outp in tqdm(train_loader):\n        inp, outp = [inps.to(device) for inps in inp], [outps.to(device) for outps in outp]\n        net.train()\n        out_h = net(inp)\n        crit = criterion(out_h, outp)\n        loss = crit.item()\n        crit.backward()\n        optimizer.step()\n        optimizer.zero_grad()\n    print(f'Epoch {epoch} > Loss: {loss}')","metadata":{"execution":{"iopub.status.busy":"2024-04-30T20:42:21.163915Z","iopub.execute_input":"2024-04-30T20:42:21.164322Z","iopub.status.idle":"2024-04-30T20:42:29.958858Z","shell.execute_reply.started":"2024-04-30T20:42:21.164290Z","shell.execute_reply":"2024-04-30T20:42:29.957198Z"},"trusted":true},"execution_count":519,"outputs":[{"name":"stderr","text":"  0%|          | 0/274 [00:00<?, ?it/s]/tmp/ipykernel_33/3189731326.py:30: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  din = [torch.tensor(tensor) for tensor in din]\n/tmp/ipykernel_33/3189731326.py:31: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).\n  dout = [torch.tensor(tensor) for tensor in dout]\n  2%|▏         | 5/274 [00:08<07:49,  1.75s/it]\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","Cell \u001b[0;32mIn[519], line 11\u001b[0m\n\u001b[1;32m      9\u001b[0m crit \u001b[38;5;241m=\u001b[39m criterion(out_h, outp)\n\u001b[1;32m     10\u001b[0m loss \u001b[38;5;241m=\u001b[39m crit\u001b[38;5;241m.\u001b[39mitem()\n\u001b[0;32m---> 11\u001b[0m \u001b[43mcrit\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     12\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mstep()\n\u001b[1;32m     13\u001b[0m optimizer\u001b[38;5;241m.\u001b[39mzero_grad()\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/_tensor.py:492\u001b[0m, in \u001b[0;36mTensor.backward\u001b[0;34m(self, gradient, retain_graph, create_graph, inputs)\u001b[0m\n\u001b[1;32m    482\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m has_torch_function_unary(\u001b[38;5;28mself\u001b[39m):\n\u001b[1;32m    483\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m handle_torch_function(\n\u001b[1;32m    484\u001b[0m         Tensor\u001b[38;5;241m.\u001b[39mbackward,\n\u001b[1;32m    485\u001b[0m         (\u001b[38;5;28mself\u001b[39m,),\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    490\u001b[0m         inputs\u001b[38;5;241m=\u001b[39minputs,\n\u001b[1;32m    491\u001b[0m     )\n\u001b[0;32m--> 492\u001b[0m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mautograd\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbackward\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    493\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgradient\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43minputs\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43minputs\u001b[49m\n\u001b[1;32m    494\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","File \u001b[0;32m/opt/conda/lib/python3.10/site-packages/torch/autograd/__init__.py:251\u001b[0m, in \u001b[0;36mbackward\u001b[0;34m(tensors, grad_tensors, retain_graph, create_graph, grad_variables, inputs)\u001b[0m\n\u001b[1;32m    246\u001b[0m     retain_graph \u001b[38;5;241m=\u001b[39m create_graph\n\u001b[1;32m    248\u001b[0m \u001b[38;5;66;03m# The reason we repeat the same comment below is that\u001b[39;00m\n\u001b[1;32m    249\u001b[0m \u001b[38;5;66;03m# some Python versions print out the first line of a multi-line function\u001b[39;00m\n\u001b[1;32m    250\u001b[0m \u001b[38;5;66;03m# calls in the traceback and some print out the last line\u001b[39;00m\n\u001b[0;32m--> 251\u001b[0m \u001b[43mVariable\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_execution_engine\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrun_backward\u001b[49m\u001b[43m(\u001b[49m\u001b[43m  \u001b[49m\u001b[38;5;66;43;03m# Calls into the C++ engine to run the backward pass\u001b[39;49;00m\n\u001b[1;32m    252\u001b[0m \u001b[43m    \u001b[49m\u001b[43mtensors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    253\u001b[0m \u001b[43m    \u001b[49m\u001b[43mgrad_tensors_\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    254\u001b[0m \u001b[43m    \u001b[49m\u001b[43mretain_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    255\u001b[0m \u001b[43m    \u001b[49m\u001b[43mcreate_graph\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    256\u001b[0m \u001b[43m    \u001b[49m\u001b[43minputs\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    257\u001b[0m \u001b[43m    \u001b[49m\u001b[43mallow_unreachable\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    258\u001b[0m \u001b[43m    \u001b[49m\u001b[43maccumulate_grad\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mTrue\u001b[39;49;00m\u001b[43m,\u001b[49m\n\u001b[1;32m    259\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "],"ename":"KeyboardInterrupt","evalue":"","output_type":"error"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}