{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":56537,"databundleVersionId":8015876,"sourceType":"competition"}],"dockerImageVersionId":30698,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd\nimport polars as pl # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-04-30T14:57:11.909976Z","iopub.execute_input":"2024-04-30T14:57:11.910334Z","iopub.status.idle":"2024-04-30T14:57:11.920689Z","shell.execute_reply.started":"2024-04-30T14:57:11.910307Z","shell.execute_reply":"2024-04-30T14:57:11.919668Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"/kaggle/input/leap-atmospheric-physics-ai-climsim/sample_submission.csv\n/kaggle/input/leap-atmospheric-physics-ai-climsim/train.csv\n/kaggle/input/leap-atmospheric-physics-ai-climsim/test.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# File Paths and Chunk Size\n\n- set file path for train set and test set\n- read training dataset with chunks as its large file","metadata":{}},{"cell_type":"code","source":"# 文件路径\ntrain_csv = '/kaggle/input/leap-atmospheric-physics-ai-climsim/train.csv'\ntest_csv = '/kaggle/input/leap-atmospheric-physics-ai-climsim/test.csv'\n\nread_chunk_size = 50000 # 一次性读取50000行数据","metadata":{"execution":{"iopub.status.busy":"2024-04-30T14:57:11.923031Z","iopub.execute_input":"2024-04-30T14:57:11.924193Z","iopub.status.idle":"2024-04-30T14:57:11.931941Z","shell.execute_reply.started":"2024-04-30T14:57:11.924159Z","shell.execute_reply":"2024-04-30T14:57:11.931018Z"},"trusted":true},"execution_count":16,"outputs":[]},{"cell_type":"markdown","source":"- read data from csv file and get the 1st chunk","metadata":{}},{"cell_type":"code","source":"# 读取数据\n%time\ntrain_chunks = pd.read_csv(train_csv, chunksize = read_chunk_size)\ntrain_data = next(train_chunks)\ntrain_data.shape","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:08:16.012836Z","iopub.execute_input":"2024-04-30T15:08:16.013226Z","iopub.status.idle":"2024-04-30T15:08:27.811720Z","shell.execute_reply.started":"2024-04-30T15:08:16.013192Z","shell.execute_reply":"2024-04-30T15:08:27.810611Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"CPU times: user 4 µs, sys: 0 ns, total: 4 µs\nWall time: 8.82 µs\n","output_type":"stream"},{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"(50000, 925)"},"metadata":{}}]},{"cell_type":"markdown","source":"# Split training set\n\n1. split into input and output\n2. split into \n    - training set\n    - validation set\n    - testing set","metadata":{"execution":{"iopub.status.busy":"2024-04-30T12:42:05.275659Z","iopub.execute_input":"2024-04-30T12:42:05.276073Z","iopub.status.idle":"2024-04-30T12:42:05.286260Z","shell.execute_reply.started":"2024-04-30T12:42:05.276042Z","shell.execute_reply":"2024-04-30T12:42:05.284486Z"}}},{"cell_type":"code","source":"# 划分数据集\ncols = train_data.columns\n\ndef split_io(dframe, in_cols = cols[1:557], out_cols = cols[557:]):\n    # 划分输入输出\n    in_df = dframe[in_cols]\n    out_df = dframe[out_cols]\n    return in_df, out_df\n\ndef split_tvt(dframe, ratio=[0.8], shuffle=False):\n    # 设定好 train (和 val) 集的比例，剩余的均归到test/val\n    assert sum(ratio) <= 1, \"Ratio sum for train and val cannot be bigger than 1\"\n    assert len(ratio) > 0, \"Ratio cannot be empty\"\n     # 根据是否需要测试集来调整比例\n    train_rat = ratio[0]\n    val_rat = (1 - train_rat) if len(ratio) == 1 else ratio[1]\n    test_rat = (1 - train_rat - val_rat) if len(ratio) == 2 else 0\n    \n    data_size = dframe.shape[0]\n    train_size = int(data_size * train_rat)\n    val_size = (data_size - train_size) if len(ratio) == 1 else int(data_size * val_rat)\n    \n    if shuffle:\n        dframe = dframe.sample(frac=1).reset_index(drop=True)\n        \n    train = dframe.iloc[:train_size]\n    val = dframe.iloc[train_size:train_size + val_size]\n    \n    if test_rat != 0:\n        test = dframe.iloc[train_size + val_size:]\n        return train, val, test\n    else:\n        return train, val\n","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:08:47.700877Z","iopub.execute_input":"2024-04-30T15:08:47.701252Z","iopub.status.idle":"2024-04-30T15:08:47.711148Z","shell.execute_reply.started":"2024-04-30T15:08:47.701223Z","shell.execute_reply":"2024-04-30T15:08:47.709937Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# 划分数据集\ntrain_set, val_set, test_set = split_tvt(train_data, [0.7, 0.2], True)\ntrain_in, train_out = split_io(train_set)\nval_in, val_out = split_io(val_set)\ntest_in, test_out = split_io(test_set)\n\nprint(f'{val_set.shape = }')\nprint(f'{test_set.shape = }')\nprint(f'{train_in.shape = }')\nprint(f'{train_out.shape = }')","metadata":{"execution":{"iopub.status.busy":"2024-04-30T15:08:59.607262Z","iopub.execute_input":"2024-04-30T15:08:59.607676Z","iopub.status.idle":"2024-04-30T15:09:00.109363Z","shell.execute_reply.started":"2024-04-30T15:08:59.607642Z","shell.execute_reply":"2024-04-30T15:09:00.108239Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stdout","text":"val_set.shape = (10000, 925)\ntest_set.shape = (5000, 925)\ntrain_in.shape = (35000, 556)\ntrain_out.shape = (35000, 368)\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}